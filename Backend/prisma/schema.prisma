// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Add your database URL in .env
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String
  role        Role      @default(CUSTOMER)
  profileImage     String?   // Optional profile picture
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cart        Cart?     @relation("UserCart")
  orders      Order[]
  reviews     Review[]
}

model Product {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  stock       Int
  imageUrl    String
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Cart {
  id          String     @id @default(uuid())
  userId      String     @unique
  items       CartItem[]
  user        User       @relation("UserCart", fields: [userId], references: [id])
}

model CartItem {
  id          String     @id @default(uuid())
  cartId      String
  productId   String
  quantity    Int
  cart        Cart       @relation(fields: [cartId], references: [id])
  product     Product    @relation(fields: [productId], references: [id])
}

model Order {
  id          String     @id @default(uuid())
  userId      String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id          String     @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  order       Order      @relation(fields: [orderId], references: [id])
  product     Product    @relation(fields: [productId], references: [id])
}

model Review {
  id          String     @id @default(uuid())
  userId      String
  productId   String
  rating      Int
  comment     String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  product     Product    @relation(fields: [productId], references: [id])
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
